<?php
/**
 * @file
 * Install schema for place id.
 */

function dpoi_install() {
	node_types_rebuild();
	$types = node_type_get_types();

	// Create all the fields we are adding to our content type.
	foreach (_dpoi_installed_fields() as $field) {
		$field_name = field_info_field($field['field_name']);
		if (empty($field_name)) {
			field_create_field($field);
		}
	}

	// Create all the instances for our fields.
	foreach (_dpoi_installed_instances() as $instance) {
		field_create_instance($instance);
	}
}

function _dpoi_installed_fields() {
	$t = get_t();
	return array(
			'field_geofield' => array(
					'field_name' => 'field_geofield',
					'type'        => 'geofield',
					'module'      => 'geofield',
					'cardinality' => '1',
			),
			'field_geohash' => array(
					'field_name' => 'field_geohash',
					'type'        => 'text_long',
					'cardinality' => '1',
			),
			'field_category' => array(
					'field_name' => 'field_category',
					'type'       => 'text',
					'cardinality' => -1,
			),
			'field_placeid' => array(
					'field_name' => 'field_placeid',
					'type'       => 'text',
					'cardinality' => -1,
			),
			'field_firstimage' => array(
					'field_name' => 'field_firstimage',
					'type'       => 'text',
					'cardinality' => -1,
					'settings'    => array(
							'max_length' => 1024,
					),
			),
			'field_zipcode' => array(
					'field_name' => 'field_zipcode',
					'type'       => 'text',
					'cardinality' => -1,
					'settings'    => array(
							'max_length' => 1024,
					),
			),
			'field_address' => array(
					'field_name' => 'field_address',
					'type'       => 'text',
					'cardinality' => -1,
					'settings'    => array(
							'max_length' => 1024,
					),
			),
			'field_homepage' => array(
					'field_name' => 'field_homepage',
					'type'       => 'text',
					'cardinality' => -1,
					'settings'    => array(
							'max_length' => 1024,
					),
			),
			'field_tel' => array(
					'field_name' => 'field_tel',
					'type'       => 'text',
					'cardinality' => -1,
					'settings'    => array(
							'max_length' => 1024,
					),
			),
			'field_overview' => array(
					'field_name' => 'field_overview',
					'type'       => 'text_with_summary',
					'cardinality' => 1,
			),
			'field_videourl' => array(
					'field_name' => 'field_videourl',
					'type'       => 'text',
					'cardinality' => -1,
					'settings'    => array(
							'max_length' => 1024,
					),
			),
	);
}

function _dpoi_installed_instances() {
	$t = get_t();
	return array(
			'field_geofield' => array(
					'field_name' => 'field_geofield',
					'label' => 'Google Maps',
					'widget' => array(
							'weight' => '-4',
							'type' => 'dpoi_openlayers',
							'module' => 'geofield',
							'settings' => array(
									'openlayers_map' => 'dpoi_widget_map',
									'data_storage' => 'collection',
							),
					),
					'settings' => array(
							'local_solr' => array(
									'enabled' => FALSE,
									'lat_field' => 'lat',
									'lng_field' => 'lng',
							),
							'user_register_form' => FALSE,
					),
					'display' => array(
							'default' => array(
									'label' => 'above',
									'type' => 'dpoii_openlayers',
									'settings' => array(
											'data' => 'full',
									),
									'module' => 'geofield',
									'weight' => 0,
							),
							'full' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
							'teaser' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
					),
					'description' => 'Map for authoring POI',
					'entity_type' => 'node',
					'bundle' => 'dpoi',
					'required' => 1,
			),
			'field_geohash' => array(
					'id' => 'geohash',
					'label' => 'Geohash Code',
					'widget' => array(
							'weight' => '5',
							'type' => 'text_textarea',
							'module' => 'text',
							'settings' => array(
									'rows' => '5',
							),
					),
					'display' => array(
							'default' => array(
									'label' => 'above',
									'type' => 'text_default',
									'module' => 'text',
									'weight' => 1,
							),
							'full' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
							'teaser' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
					),
					'description' => 'Geohash code generated by user input.',
					'field_name' => 'field_geohash',
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_category' => array(
					'id' => 'category',
					'label' => 'POI Category',
					'widget' => array(
							'weight' => '5',
							'type' => 'text',
							'module' => 'text',
					),
					'display' => array(
							'default' => array(
									'label' => 'above',
									'type' => 'text_default',
									'module' => 'text',
									'weight' => 1,
							),
							'full' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
							'teaser' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
					),
					'description' => 'Select the category of POI you authored.',
					'field_name' => 'field_category',
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_placeid' => array(
					'id' => 'placeid',
					'label' => 'Place ID',
					'widget' => array(
							'weight' => '5',
							'type' => 'text',
							'module' => 'text',
					),
					'display' => array(
							'default' => array(
									'label' => 'above',
									'type' => 'text_default',
									'module' => 'text',
									'weight' => 1,
							),
							'full' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
							'teaser' => array(
									'type' => 'hidden',
									'label' => 'above',
									'settings' => array(),
									'weight' => 0,
							),
					),
					'description' => 'This is the Place Id of POI.',
					'field_name' => 'field_placeid',
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_firstimage' => array(
					'field_name' => 'field_firstimage',
					'label' => t('Main image URL'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_zipcode' => array(
					'field_name' => 'field_zipcode',
					'label' => t('Zipcode'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_address' => array(
					'field_name' => 'field_address',
					'label' => t('Address'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_homepage' => array(
					'field_name' => 'field_homepage',
					'label' => t('Homepage'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_tel' => array(
					'field_name' => 'field_tel',
					'label' => t('Phone'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_overview' => array(
					'field_name' => 'field_overview',
					'label' => t('Overview'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
			'field_videourl' => array(
					'field_name' => 'field_videourl',
					'label' => t('Video URL'),
					'entity_type' => 'node',
					'bundle' => 'dpoi',
			),
	);
}

/**
 * Implements hook_uninstall().
 */
function dpoi_uninstall() {
	$sql = 'SELECT n.nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => 'dpoi'));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}

	// Delete all the nodes at once
	node_delete_multiple($nids);

	foreach (array_keys(_dpoi_installed_fields()) as $field) {
		field_delete_field($field);
	}

	$instances = field_info_instances('node', 'dpoi');

	foreach ($instances as $instance_name => $instance) {
		field_delete_instance($instance);

		$instance = array('field_name' => $instance_name,'bundle' => 'dpoi','entity_type' => 'node');
		field_delete_instance($instance);
	}

	// Temporarily enable the node type
	db_update('node_type')
	->fields(array(
	'disabled' => 0,
	))
	->condition('type', 'dpoi', '=')
	->condition('disabled', 1, '=')
	->execute();

	// Clear the node type cache
	node_type_cache_reset();

	// Delete our content type
	node_type_delete('dpoi');

	variable_del('node_options_dpoi');

	// Purge all field infromation
	field_purge_batch(1000);
}